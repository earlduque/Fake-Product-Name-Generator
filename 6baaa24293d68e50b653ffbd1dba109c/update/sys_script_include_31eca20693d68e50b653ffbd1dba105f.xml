<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_snc_ehd_snpng.ProductNameGenerator</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ProductNameGenerator</name>
        <script><![CDATA[var ProductNameGenerator = Class.create();
ProductNameGenerator.prototype = {
    initialize: function() {},

    generate: function(emoji = true) {

        const star = emoji ? ']]>ðŸŒŸ<![CDATA[' : ':star:';

        var names = [{
                text: "Scheduled Jobs (again)",
                order: 0,
                end: true,
                nospace: true
            },
            {
                text: "List v3 (v2)",
                order: 0,
                end: true,
                nospace: true
            }
        ];

        const retrieve = ['buzzword', 'suffix', 'ender'];
        const wordOptions = {};
        for (let wordType of retrieve) {
            wordOptions[wordType] = [];
        }

        const optionGr = new GlideRecord('x_snc_ehd_snpng_product_name');
        optionGr.query();
        while (optionGr.next()) {
            wordOptions[optionGr.getValue('type')].push(optionGr.getValue('word'));
        }

        for (let i in wordOptions.buzzword) {
            var buzzword = {
                text: wordOptions.buzzword[i],
                order: 0,
                end: false,
                nospace: true
            };
            names.push(buzzword);
        }

        for (var j in wordOptions.suffix) {
            var suffix = {
                text: wordOptions.suffix[j],
                order: 1,
                end: false,
                nospace: false
            };
            names.push(suffix);
        }

        var currentOrder = 0;
        var results = [];

        while (currentOrder < 2) {
            var filteredNames = names.filter(function(obj) {
                return obj.order === currentOrder;
            });
            if (filteredNames.length > 0) {
				var item = filteredNames[Math.floor(Math.random() * filteredNames.length)];
                if (item.end) {
                    results.push(item.text);
                    break;
                }
                let keepGoing = true;
                while (keepGoing) {
                    if (!item.nospace) {
                        if (Math.random() < 0.5) results.push(" ");
                    }
                    results.push(item.text);
                    if (Math.random() < 0.80) keepGoing = false;
                }
                currentOrder++;
            } else {
                break;
            }
        }

        if (Math.random() < 0.5) results.push(" " + wordOptions.ender[Math.floor(Math.random() * wordOptions.ender.length)]);

        var message = `Introducing ServiceNow's newest product: ${star} ${results.join("")} ${star}`;
        return message;

    },

	// TODO: fill out the data
	// TODO: Make a portal
	// TODO: dance

    type: 'ProductNameGenerator'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>earl.duque</sys_created_by>
        <sys_created_on>2024-05-22 18:38:26</sys_created_on>
        <sys_id>31eca20693d68e50b653ffbd1dba105f</sys_id>
        <sys_mod_count>7</sys_mod_count>
        <sys_name>ProductNameGenerator</sys_name>
        <sys_package display_value="ServiceNow Product Name Generator" source="x_snc_ehd_snpng">6baaa24293d68e50b653ffbd1dba109c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="ServiceNow Product Name Generator">6baaa24293d68e50b653ffbd1dba109c</sys_scope>
        <sys_update_name>sys_script_include_31eca20693d68e50b653ffbd1dba105f</sys_update_name>
        <sys_updated_by>earl.duque</sys_updated_by>
        <sys_updated_on>2024-05-22 19:02:48</sys_updated_on>
    </sys_script_include>
</record_update>
